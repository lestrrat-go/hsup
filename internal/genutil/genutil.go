package genutil

import (
	"bytes"
	"fmt"
	"go/format"
	"io"
	"log"
	"os"
	"path/filepath"
	"regexp"
	"strconv"
	"strings"

	"github.com/lestrrat-go/jsschema"
	"github.com/lestrrat-go/jsval"
	"github.com/lestrrat-go/jsval/builder"
	"github.com/pkg/errors"
)

var rxif = regexp.MustCompile(`\s*interface\s*{\s*}\s*`)

func LooksLikeContainer(s string) bool {
	return strings.HasPrefix(s, "[]") || strings.HasPrefix(s, "map[")
}

func LooksLikeStruct(s string) bool {
	if rxif.MatchString(s) {
		return false
	}
	return !LooksLikeContainer(s)
}

var wsrx = regexp.MustCompile(`\s+`)

func TitleToName(s string) string {
	buf := bytes.Buffer{}
	for _, p := range wsrx.Split(s, -1) {
		buf.WriteString(strings.ToUpper(p[:1]))
		buf.WriteString(p[1:])
	}
	return buf.String()
}

func MakeValidator(s *schema.Schema, ctx interface{}) (*jsval.JSVal, error) {
	b := builder.New()
	v, err := b.BuildWithCtx(s, ctx)
	if err != nil {
		return nil, errors.Wrap(err, "failed to build validator from schema")
	}

	return v, nil
}

func WriteImports(out io.Writer, stdlibs, extlibs []string) error {
	if len(stdlibs) == 0 && len(extlibs) == 0 {
		return nil
	}

	fmt.Fprint(out, "import (\n")
	for _, pname := range stdlibs {
		fmt.Fprint(out, "\t"+`"`+pname+`"`+"\n")
	}
	if len(extlibs) > 0 {
		if len(stdlibs) > 0 {
			fmt.Fprint(out, "\n")
		}
		for _, pname := range extlibs {
			fmt.Fprint(out, "\t"+`"`+pname+`"`+"\n")
		}
	}
	fmt.Fprint(out, ")\n\n")
	return nil
}

func CreateFile(fn string) (*os.File, error) {
	dir := filepath.Dir(fn)
	if _, err := os.Stat(dir); err != nil {
		if err := os.MkdirAll(dir, 0755); err != nil {
			return nil, errors.Wrap(err, "failed to create directory")
		}
	}
	f, err := os.Create(fn)
	if err != nil {
		return nil, errors.Wrap(err, "failed to create file")
	}
	return f, nil
}

func WriteFmtCode(out io.Writer, buf *bytes.Buffer) error {
	fsrc, err := format.Source(buf.Bytes())
	if err != nil {
		log.Printf("Failed to cleanup Go code (probably a syntax error). Generating file anyway")
		if _, err := buf.WriteTo(out); err != nil {
			return errors.Wrap(err, "failed to write (broken) source to output")
		}
		return nil
	}

	if _, err := out.Write(fsrc); err != nil {
		return errors.Wrap(err, "failed to write to output")
	}
	return nil
}

func WriteDoNotEdit(out io.Writer) {
	fmt.Fprintf(out, "// DO NOT EDIT. Automatically generated by hsup\n")
}

func SplitVersion(v string) []int {
	ret := make([]int, 3)
	list := strings.Split(v, ".")
	if len(list) > 3 {
		return ret
	}

	for i, e := range list[:2] {
		x, _ := strconv.Atoi(e)
		ret[i] = x
	}
	return ret
}

func VersionCompare(v1, v2 string) int {
	e1 := SplitVersion(v1)
	e2 := SplitVersion(v2)

	for i := 0; i < 3; i++ {
		if e1[i] == e2[i] {
			continue
		}

		if e1[i] > e2[i] {
			return -1
		}
		if e1[i] < e2[i] {
			return 1
		}
	}
	return 0
}
